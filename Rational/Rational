using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace rtional
{
    class rational
    {
        class Rational
        {
            public int numerator { get; private set; }
            public int denominator { get; private set; }

            public Rational(int numerator, int denominator)
            {
                if (numerator == denominator)
                {
                    this.numerator = 1;
                    this.denominator = 1;
                }
                else if (denominator <= 0 || numerator < 0)
                {
                    this.numerator = 0;
                    this.denominator = 0;
                }

                this.numerator = numerator;
                this.denominator = denominator;
            }

            public bool GreaterThen(Rational other)
            {
                if (this.numerator * other.denominator > this.denominator * other.numerator)
                    return true;
                return false;
            }

            public bool Equals(Rational r)
            {
                return this.numerator * r.denominator == this.denominator * r.numerator;
            }

            public static Rational operator +(Rational r1, Rational r2)
            {
                Rational newNumber = new Rational((r1.numerator * r2.denominator) + (r1.denominator * r2.numerator), r1.denominator * r2.denominator);
                return newNumber;
            }

            public static Rational operator -(Rational r1, Rational r2)
            {
                Rational newRNumber = new Rational((r1.numerator * r2.denominator) - (r1.denominator * r2.numerator), r1.denominator * r2.denominator);
                return newRNumber;
            }

            public static Rational operator *(Rational r1, Rational r2)
            {
                Rational newNumber = new Rational(r1.numerator * r2.numerator, r1.denominator * r2.denominator);
                return newNumber;
            }

            public override string ToString()
            {
                return $"{numerator} / {denominator}";
            }
        }
    }
}

